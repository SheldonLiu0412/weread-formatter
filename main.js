/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WeReadFormatter
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var VIEW_TYPE_WEREAD = "weread-formatter";
var ConfirmationModal = class extends import_obsidian.Modal {
  constructor(app, fileName, onConfirm) {
    super(app);
    this.fileName = fileName;
    this.onConfirm = onConfirm;
    this.result = false;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u786E\u8BA4\u683C\u5F0F\u5316" });
    contentEl.createEl("p", {
      text: `\u662F\u5426\u8981\u683C\u5F0F\u5316\u6587\u6863 "${this.fileName}"\uFF1F`
    });
    const buttonContainer = contentEl.createDiv("modal-button-container");
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
    const confirmButton = buttonContainer.createEl("button", {
      cls: "mod-cta",
      text: "\u786E\u8BA4\u683C\u5F0F\u5316"
    });
    confirmButton.addEventListener("click", () => {
      this.result = true;
      this.close();
      this.onConfirm();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var AIService = class {
  constructor(apiUrl, apiKey, modelName, promptTemplate) {
    this.apiUrl = apiUrl;
    this.apiKey = apiKey;
    this.modelName = modelName;
    this.promptTemplate = promptTemplate;
  }
  async askAI(quote, thought, bookName) {
    try {
      const prompt = `\u6B63\u5728\u9605\u8BFB\uFF1A${bookName}

\u539F\u6587\uFF1A${quote}

\u8BFB\u8005\u60F3\u6CD5\uFF1A${thought}

${this.promptTemplate}`;
      const response = await fetch(this.apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: this.modelName,
          messages: [{
            role: "user",
            content: prompt
          }]
        })
      });
      if (!response.ok) {
        throw new Error("API \u8BF7\u6C42\u5931\u8D25");
      }
      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      console.error("AI \u670D\u52A1\u9519\u8BEF:", error);
      throw error;
    }
  }
};
var AIResponseModal = class extends import_obsidian.Modal {
  constructor(app, quote, thought, aiService, bookName) {
    super(app);
    this.quote = quote;
    this.thought = thought;
    this.aiService = aiService;
    this.bookName = bookName;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("ai-response-modal");
    const loadingEl = contentEl.createDiv("loading-container");
    loadingEl.innerHTML = '<div class="loading-spinner"></div><div class="loading-text">\u{1F40C}\u5C0F\u8717 \u6B63\u5728\u9605\u8BFB...</div>';
    try {
      const response = await this.aiService.askAI(this.quote, this.thought, this.bookName);
      loadingEl.remove();
      const responseContainer = contentEl.createDiv("response-container");
      const quoteSection = responseContainer.createDiv("quote-section");
      quoteSection.createEl("h3", { text: "\u539F\u6587" }).addClass("section-title");
      quoteSection.createDiv("quote-content").setText(this.quote.replace("\u{1F40C}", "").trim());
      if (this.thought) {
        const thoughtSection = responseContainer.createDiv("thought-section");
        thoughtSection.createEl("h3", { text: "\u8BFB\u8005\u60F3\u6CD5" }).addClass("section-title");
        thoughtSection.createDiv("thought-content").setText(this.thought);
      }
      const aiSection = responseContainer.createDiv("ai-section");
      const titleContainer = aiSection.createDiv("title-container");
      const aiTitle = titleContainer.createEl("h3", { text: "\u5C0F\u8717\u601D\u8003" });
      aiTitle.addClass("section-title");
      const copyButton = titleContainer.createEl("button", {
        text: "\u590D\u5236",
        cls: "copy-button"
      });
      copyButton.addEventListener("click", async () => {
        await navigator.clipboard.writeText(response);
        const originalText = copyButton.textContent || "\u590D\u5236";
        copyButton.setText("\u5DF2\u590D\u5236!");
        setTimeout(() => copyButton.setText(originalText), 2e3);
      });
      aiSection.createDiv("ai-content").setText(response);
    } catch (error) {
      loadingEl.remove();
      contentEl.createEl("p", { text: "\u83B7\u53D6 AI \u54CD\u5E94\u65F6\u51FA\u9519\uFF1A" + error.message }).addClass("error-message");
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var DEFAULT_SETTINGS = {
  apiUrl: "",
  apiKey: "",
  modelName: "",
  promptTemplate: "\u4F60\u662F\u4E00\u540D\u8D44\u6DF1\u8BFB\u8005\uFF0C\u8BF7\u4F60\u57FA\u4E8E\u6211\u7684\u4E0A\u8FF0\u8BFB\u4E66\u7B14\u8BB0\u8C08\u8C08\u4F60\u7684\u601D\u8003\u3002\u53EF\u4EE5\u662F\u91D1\u53E5\u3001\u8111\u6D1E\u3001\u6216\u5BF9\u6211\u89C2\u70B9\u7684\u8D28\u7591\uFF0C50\uFF5E100\u5B57\u5DE6\u53F3\uFF0C\u4E0D\u8981\u8F7B\u6613\u8BA4\u540C\u6211\uFF0C\u4F60\u7684\u89C1\u89E3\u4E00\u5B9A\u8981\u660E\u786E\u3001\u4E13\u4E1A\u3001\u72EC\u5230\u3001\u53D1\u4EBA\u6DF1\u7701\uFF0C\u4E0D\u8981\u4F7F\u7528Markdown\u683C\u5F0F\u4F18\u5316."
};
var WeReadFormatterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u5FAE\u4FE1\u8BFB\u4E66\u683C\u5F0F\u5316\u8BBE\u7F6E" });
    const noticeEl = containerEl.createEl("div", {
      cls: "setting-notice",
      attr: {
        style: "background-color: var(--background-primary-alt); padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid var(--background-modifier-border);"
      }
    });
    const warningIconEl = noticeEl.createEl("span", {
      text: "\u26A0\uFE0F ",
      attr: {
        style: "font-size: 16px; margin-right: 8px;"
      }
    });
    noticeEl.createEl("p", {
      text: "\u8BF7\u5148\u914D\u7F6EAI\u670D\u52A1API\u4FE1\u606F\uFF0C\u5426\u5219\u65E0\u6CD5\u4F7F\u7528AI\u601D\u8003\u529F\u80FD\u3002\u914D\u7F6E\u5B8C\u6210\u540E\uFF0C\u5728\u9884\u89C8\u6A21\u5F0F\u4E0B\u5C06\u9F20\u6807\u60AC\u505C\u5728\u5F15\u7528\u5757\u4E0A\u5373\u53EF\u770B\u5230AI\u6309\u94AE\u3002",
      attr: {
        style: "margin: 0; color: var(--text-normal); display: inline;"
      }
    });
    new import_obsidian.Setting(containerEl).setName("API URL").setDesc("AI \u670D\u52A1\u7684 API \u5730\u5740").addText((text) => text.setPlaceholder("\u8F93\u5165 API URL").setValue(this.plugin.settings.apiUrl).onChange(async (value) => {
      this.plugin.settings.apiUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("AI \u670D\u52A1\u7684 API \u5BC6\u94A5").addText((text) => text.setPlaceholder("\u8F93\u5165 API Key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6A21\u578B\u540D\u79F0").setDesc("\u4F7F\u7528\u7684 AI \u6A21\u578B\u540D\u79F0").addText((text) => text.setPlaceholder("\u8F93\u5165\u6A21\u578B\u540D\u79F0").setValue(this.plugin.settings.modelName).onChange(async (value) => {
      this.plugin.settings.modelName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("AI \u63D0\u793A\u8BCD").setDesc("\u8BBE\u7F6E AI \u54CD\u5E94\u7684\u63D0\u793A\u8BCD\u6A21\u677F").addTextArea((text) => text.setPlaceholder("\u8F93\u5165\u63D0\u793A\u8BCD\u6A21\u677F").setValue(this.plugin.settings.promptTemplate).onChange(async (value) => {
      this.plugin.settings.promptTemplate = value;
      await this.plugin.saveSettings();
    })).addExtraButton((button) => button.setIcon("reset").setTooltip("\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C").onClick(async () => {
      this.plugin.settings.promptTemplate = DEFAULT_SETTINGS.promptTemplate;
      await this.plugin.saveSettings();
      this.display();
    }));
  }
};
var WeReadView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_WEREAD;
  }
  getDisplayText() {
    return "\u5FAE\u4FE1\u8BFB\u4E66\u683C\u5F0F\u5316";
  }
  getIcon() {
    return "book";
  }
  async onOpen() {
    const container = this.containerEl;
    container.empty();
    container.addClass("weread-formatter-view");
    const headerDiv = container.createDiv({ cls: "weread-formatter-header" });
    headerDiv.createEl("h2", { text: "\u5FAE\u4FE1\u8BFB\u4E66\u7B14\u8BB0\u683C\u5F0F\u5316\u5DE5\u5177" });
    const descDiv = container.createDiv({ cls: "weread-formatter-description" });
    descDiv.createEl("h3", {
      text: "\u4F7F\u7528\u6307\u5357",
      cls: "weread-formatter-title"
    });
    const guideSection = descDiv.createDiv({ cls: "weread-formatter-guide" });
    guideSection.createEl("h4", {
      text: "\u4F7F\u7528\u6B65\u9AA4",
      cls: "guide-title"
    });
    const steps = [
      {
        icon: "\u{1F4CB}",
        text: "\u4ECE\u5FAE\u4FE1\u8BFB\u4E66\u590D\u5236\u7B14\u8BB0\u5230\u5FAE\u4FE1\uFF08\u6D88\u9664\u683C\u5F0F\uFF09"
      },
      {
        icon: "\u{1F4DD}",
        text: "\u4ECE\u5FAE\u4FE1\u590D\u5236\u5E76\u7C98\u8D34\u5230 Obsidian \u4E2D"
      },
      {
        icon: "\u2728",
        text: "\u70B9\u51FB\u4E0B\u65B9\u6309\u94AE\u8FDB\u884C\u683C\u5F0F\u5316"
      },
      {
        icon: "\u{1F914}",
        text: "\u5207\u6362\u81F3\u9605\u8BFB\u6A21\u5F0F\uFF0C\u5F53\u9F20\u6807\u60AC\u505C\u81F3\u539F\u6587\u65F6\u53EF\u89C1 AI \u601D\u8003\u6309\u94AE"
      }
    ];
    const stepsContainer = guideSection.createDiv({ cls: "steps-container" });
    steps.forEach((step, index) => {
      const stepDiv = stepsContainer.createDiv({ cls: "step-item" });
      stepDiv.createSpan({ cls: "step-number", text: `${index + 1}` });
      stepDiv.createSpan({ cls: "step-icon", text: step.icon });
      stepDiv.createSpan({ cls: "step-text", text: step.text });
    });
    const tipDiv = descDiv.createDiv({ cls: "weread-formatter-tip" });
    const tipList = [
      "\u{1F4A1} \u683C\u5F0F\u5316\u540E\u7684\u7B14\u8BB0\u652F\u6301 AI \u6DF1\u5EA6\u601D\u8003\uFF0C\u5E2E\u52A9\u4F60\u83B7\u5F97\u66F4\u591A\u9605\u8BFB\u542F\u53D1",
      "\u2699\uFE0F \u4F7F\u7528 AI \u529F\u80FD\u524D\uFF0C\u8BF7\u5728\u63D2\u4EF6\u8BBE\u7F6E\u4E2D\u914D\u7F6E API \u5730\u5740\u3001\u5BC6\u94A5\u548C\u6A21\u578B"
    ];
    tipList.forEach((tip) => {
      tipDiv.createEl("p", {
        text: tip,
        cls: "tip-text"
      });
    });
    const buttonDiv = container.createDiv({ cls: "weread-formatter-buttons" });
    const formatButton = buttonDiv.createEl("button", {
      text: "\u683C\u5F0F\u5316\u5F53\u524D\u6587\u6863",
      cls: "mod-cta"
    });
    formatButton.addEventListener("click", () => {
      var _a, _b;
      const activeLeaf = this.app.workspace.activeLeaf;
      const formatFile = (view2) => {
        const editor = view2.editor;
        const content = editor.getValue();
        const formattedContent = this.app.plugins.plugins["weread-formatter"].formatWeReadNotes(content);
        editor.setValue(formattedContent);
        new import_obsidian.Notice("\u7B14\u8BB0\u683C\u5F0F\u5316\u5B8C\u6210\uFF01");
      };
      if (!(activeLeaf == null ? void 0 : activeLeaf.view) || !(activeLeaf.view instanceof import_obsidian.MarkdownView)) {
        const markdownLeaves = this.app.workspace.getLeavesOfType("markdown");
        if (markdownLeaves.length > 0) {
          const lastMarkdownLeaf = markdownLeaves[markdownLeaves.length - 1];
          if (lastMarkdownLeaf.view instanceof import_obsidian.MarkdownView) {
            const view2 = lastMarkdownLeaf.view;
            const fileName2 = ((_a = view2.file) == null ? void 0 : _a.basename) || "\u672A\u547D\u540D\u6587\u6863";
            new ConfirmationModal(
              this.app,
              fileName2,
              () => formatFile(view2)
            ).open();
            return;
          }
        }
        new import_obsidian.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A Markdown \u6587\u4EF6\uFF01");
        return;
      }
      const view = activeLeaf.view;
      const fileName = ((_b = view.file) == null ? void 0 : _b.basename) || "\u672A\u547D\u540D\u6587\u6863";
      new ConfirmationModal(
        this.app,
        fileName,
        () => formatFile(view)
      ).open();
    });
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        setTimeout(() => this.addAIButtons(), 100);
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", () => {
        setTimeout(() => this.addAIButtons(), 100);
      })
    );
    this.registerEvent(
      this.app.workspace.on("resize", () => {
        setTimeout(() => this.addAIButtons(), 100);
      })
    );
    setTimeout(() => this.addAIButtons(), 300);
  }
  addAIButtons() {
    const plugin = this.app.plugins.plugins["weread-formatter"];
    if (!plugin.settings.apiUrl || !plugin.settings.apiKey || !plugin.settings.modelName) {
      return;
    }
    const markdownViews = this.app.workspace.getLeavesOfType("markdown");
    markdownViews.forEach((leaf) => {
      var _a;
      const view = leaf.view;
      if (!(view instanceof import_obsidian.MarkdownView))
        return;
      const previewEl = (_a = view.previewMode) == null ? void 0 : _a.containerEl;
      if (!previewEl)
        return;
      const quotes = previewEl.querySelectorAll("blockquote");
      quotes.forEach((quote) => {
        if (quote.querySelector(".ai-button"))
          return;
        const button = document.createElement("button");
        button.className = "ai-button";
        button.innerHTML = "\u{1F40C}";
        button.title = "\u8BF7\u5C0F\u8717\u601D\u8003";
        button.addEventListener("click", async (e) => {
          var _a2, _b;
          e.stopPropagation();
          const quoteText = ((_a2 = quote.textContent) == null ? void 0 : _a2.replace("\u{1F916}", "").trim()) || "";
          let thoughtText = "";
          const blockquoteDiv = quote.parentElement;
          const container = blockquoteDiv == null ? void 0 : blockquoteDiv.parentElement;
          if (container) {
            const children = Array.from(container.children);
            const currentIndex = children.indexOf(blockquoteDiv);
            if (currentIndex !== -1 && currentIndex + 1 < children.length) {
              const nextElement = children[currentIndex + 1];
              if (nextElement.className === "el-p") {
                thoughtText = ((_b = nextElement.textContent) == null ? void 0 : _b.trim()) || "";
              }
            }
          }
          if (quoteText) {
            await plugin.askAIOpinion(quoteText, thoughtText);
          }
        });
        quote.style.position = "relative";
        quote.appendChild(button);
      });
    });
  }
};
var WeReadFormatter = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.currentBookName = "";
  }
  async onload() {
    await this.loadSettings();
    this.aiService = new AIService(
      this.settings.apiUrl,
      this.settings.apiKey,
      this.settings.modelName,
      this.settings.promptTemplate
    );
    this.addSettingTab(new WeReadFormatterSettingTab(this.app, this));
    this.addCommand({
      id: "format-weread-notes",
      name: "\u683C\u5F0F\u5316\u5FAE\u4FE1\u8BFB\u4E66\u7B14\u8BB0",
      editorCallback: (editor, view) => {
        const content = editor.getValue();
        const formattedContent = this.formatWeReadNotes(content);
        editor.setValue(formattedContent);
        new import_obsidian.Notice("\u7B14\u8BB0\u683C\u5F0F\u5316\u5B8C\u6210\uFF01");
      }
    });
    this.registerView(
      VIEW_TYPE_WEREAD,
      (leaf) => this.view = new WeReadView(leaf)
    );
    this.addCommand({
      id: "show-weread-view",
      name: "\u6253\u5F00\u5FAE\u4FE1\u8BFB\u4E66\u683C\u5F0F\u5316\u9762\u677F",
      callback: () => {
        this.initLeaf();
      }
    });
    this.addRibbonIcon(
      "book",
      "\u5FAE\u4FE1\u8BFB\u4E66\u683C\u5F0F\u5316",
      () => {
        this.initLeaf();
      }
    );
    if (this.app.workspace.layoutReady) {
      this.initLeaf();
    } else {
      this.app.workspace.onLayoutReady(() => this.initLeaf());
    }
    this.addStyle();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.aiService = new AIService(
      this.settings.apiUrl,
      this.settings.apiKey,
      this.settings.modelName,
      this.settings.promptTemplate
    );
  }
  async initLeaf() {
    const existing = this.app.workspace.getLeavesOfType(VIEW_TYPE_WEREAD);
    if (existing.length) {
      this.app.workspace.revealLeaf(existing[0]);
      return;
    }
    const leaf = this.app.workspace.getRightLeaf(false);
    if (leaf) {
      await leaf.setViewState({
        type: VIEW_TYPE_WEREAD,
        active: true
      });
      this.app.workspace.revealLeaf(leaf);
    }
  }
  addStyle() {
    const styleEl = document.createElement("style");
    styleEl.id = "weread-formatter-styles";
    styleEl.textContent = `
            .weread-formatter-view {
                padding: 20px;
            }

            .weread-formatter-header {
                text-align: center;
                margin-bottom: 30px;
            }

            .weread-formatter-description {
                padding: 16px;
                background: var(--background-secondary);
                border-radius: 8px;
                margin-bottom: 16px;
            }

            .weread-formatter-title {
                margin: 0 0 16px 0;
                color: var(--text-normal);
                font-size: 1.4em;
                font-weight: 600;
                text-align: center;
            }

            .weread-formatter-guide {
                margin-bottom: 16px;
            }

            .guide-title {
                color: var(--text-normal);
                font-size: 1.1em;
                margin: 0 0 12px 0;
                font-weight: 600;
            }

            .steps-container {
                display: flex;
                flex-direction: column;
                gap: 12px;
            }

            .step-item {
                display: flex;
                align-items: center;
                gap: 8px;
                padding: 8px;
                background: var(--background-primary);
                border-radius: 6px;
                transition: all 0.2s ease;
            }

            .step-item:hover {
                transform: translateX(4px);
                background: var(--background-primary-alt);
            }

            .step-number {
                background: var(--text-accent);
                color: var(--text-on-accent);
                width: 20px;
                height: 20px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.8em;
                font-weight: 600;
            }

            .step-icon {
                font-size: 1.1em;
            }

            .step-text {
                color: var(--text-normal);
                font-size: 0.9em;
                flex: 1;
            }

            .weread-formatter-tip {
                margin-top: 16px;
                padding: 12px;
                background: var(--background-primary-alt);
                border-radius: 6px;
                border-left: 4px solid var(--text-accent);
            }

            .tip-text {
                margin: 0;
                color: var(--text-muted);
                font-size: 0.9em;
                line-height: 1.4;
            }

            .weread-formatter-buttons {
                display: flex;
                gap: 8px;
                margin-top: 16px;
            }

            .weread-formatter-buttons button {
                flex: 1;
                padding: 8px 16px;
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: all 0.2s ease;
                font-size: 0.9em;
                font-weight: 500;
            }

            .weread-formatter-buttons button:hover {
                opacity: 0.9;
                transform: translateY(-1px);
            }

            /* AI \u54CD\u5E94\u76F8\u5173\u6837\u5F0F */
            .ai-response-modal {
                padding: 24px;
                max-width: 800px;
                margin: 0 auto;
            }

            .response-container {
                max-height: 70vh;
                overflow-y: auto;
                padding: 0 24px;
                display: flex;
                flex-direction: column;
                gap: 20px;
            }

            .quote-section, .thought-section, .ai-section {
                margin-bottom: 20px;
                padding: 20px;
                background: var(--background-modifier-form-field);
                border-radius: 12px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                transition: all 0.3s ease;
            }

            .quote-section:hover, .thought-section:hover, .ai-section:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .title-container {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 16px;
            }

            .section-title {
                margin: 0;
                color: var(--text-normal);
                font-size: 1.2em;
                font-weight: 600;
                letter-spacing: 0.5px;
            }

            .quote-content, .thought-content, .ai-content {
                margin: 0;
                color: var(--text-muted);
                line-height: 1.6;
                font-size: 1.1em;
            }

            .loading-container {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                height: 200px;
                gap: 16px;
            }

            .loading-spinner {
                border: 3px solid rgba(var(--text-accent-rgb), 0.1);
                border-top: 3px solid var(--text-accent);
                border-radius: 50%;
                width: 48px;
                height: 48px;
                animation: spin 1s cubic-bezier(0.4, 0, 0.2, 1) infinite;
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }

            .loading-text {
                color: var(--text-normal);
                font-size: 1.1em;
                font-weight: 500;
            }

            .error-message {
                color: var(--text-error);
                padding: 16px;
                border-radius: 8px;
                background: rgba(var(--text-error-rgb), 0.1);
            }

            /* AI \u6309\u94AE\u76F8\u5173\u6837\u5F0F */
            .ai-button {
                position: absolute;
                right: -30px;
                top: 50%;
                transform: translateY(-50%);
                background: transparent;
                border: none;
                cursor: pointer;
                padding: 4px;
                font-size: 1.2em;
                opacity: 0;
                transition: all 0.3s ease;
                border-radius: 50%;
            }

            .ai-button:hover {
                background: var(--background-modifier-hover);
                transform: translateY(-50%) scale(1.1);
            }

            blockquote:hover .ai-button {
                opacity: 1;
            }

            .copy-button {
                font-size: 0.8em;
                padding: 4px 8px;
                border-radius: 4px;
                border: 1px solid var(--text-muted);
                background: transparent;
                color: var(--text-muted);
                cursor: pointer;
                transition: all 0.2s ease;
            }

            .copy-button:hover {
                background: var(--text-accent);
                color: var(--text-on-accent);
                border-color: var(--text-accent);
            }
        `;
    document.head.appendChild(styleEl);
  }
  // 添加新方法用于处理 AI 对话
  async askAIOpinion(quote, thought) {
    new AIResponseModal(this.app, quote, thought, this.aiService, this.currentBookName).open();
  }
  formatWeReadNotes(content) {
    const lines = content.split("\n");
    const cleanedLines = [];
    let i = 0;
    let title = "";
    let authorNotesLine = [];
    let currentNote = {
      highlight: null,
      original: null,
      thought: null
    };
    let pendingOriginal = null;
    let pendingThought = null;
    while (i < lines.length) {
      const line = lines[i].trim();
      if (line.startsWith("\u300A") && line.endsWith("\u300B")) {
        title = "# " + line;
        this.currentBookName = line;
        i++;
        break;
      }
      i++;
    }
    while (i < lines.length) {
      const line = lines[i].trim();
      if (!line) {
        i++;
        continue;
      }
      if (line.startsWith("\u6587\u524D") || line.startsWith("\u25C6") || line.startsWith("\u539F\u6587\uFF1A")) {
        break;
      }
      authorNotesLine.push(line);
      i++;
    }
    if (title) {
      cleanedLines.push(title, "");
    }
    if (authorNotesLine.length > 0) {
      cleanedLines.push(authorNotesLine.join(" "), "");
    }
    const isChapterTitle = (currentLine, prevLine, nextLine) => {
      if (!currentLine || currentLine.startsWith("\u25C6") || currentLine.startsWith("\u539F\u6587\uFF1A")) {
        return false;
      }
      if (prevLine && nextLine) {
        if (prevLine.includes("\u7B14\u8BB0") && nextLine.startsWith("\u25C6")) {
          return true;
        }
        if (prevLine.startsWith("\u25C6") && nextLine.startsWith("\u25C6")) {
          return true;
        }
        if (prevLine.startsWith("\u539F\u6587\uFF1A") && nextLine.startsWith("\u25C6")) {
          return true;
        }
      }
      if (currentLine.length <= 5 && !currentLine.startsWith("\u539F\u6587\uFF1A")) {
        return true;
      }
      return false;
    };
    const outputCurrentNote = () => {
      if (currentNote.highlight || currentNote.thought || pendingOriginal) {
        if (currentNote.highlight) {
          cleanedLines.push("```txt");
          cleanedLines.push(currentNote.highlight);
          cleanedLines.push("```");
          cleanedLines.push("");
        }
        if (pendingOriginal) {
          cleanedLines.push("> " + pendingOriginal, "");
          if (currentNote.thought) {
            cleanedLines.push(currentNote.thought, "");
          }
          pendingOriginal = null;
        } else if (currentNote.thought) {
          cleanedLines.push(currentNote.thought, "");
        }
      }
      currentNote = { highlight: null, original: null, thought: null };
    };
    while (i < lines.length) {
      const line = lines[i].trim();
      if (!line || line.includes("\u53D1\u8868\u60F3\u6CD5") || line.includes("-- \u6765\u81EA\u5FAE\u4FE1\u8BFB\u4E66")) {
        i++;
        continue;
      }
      const prevLine = i > 0 ? lines[i - 1].trim() : "";
      const nextLine = i < lines.length - 1 ? lines[i + 1].trim() : "";
      if (isChapterTitle(line, prevLine, nextLine)) {
        outputCurrentNote();
        pendingThought = null;
        cleanedLines.push("## " + line, "");
        i++;
        continue;
      }
      if (line.startsWith("\u25C6")) {
        outputCurrentNote();
        pendingThought = null;
        currentNote.highlight = line;
      } else if (line.startsWith("\u539F\u6587\uFF1A")) {
        const originalText = line.substring(3);
        if (pendingThought) {
          cleanedLines.push("> " + originalText, "");
          cleanedLines.push(pendingThought, "");
          pendingThought = null;
        } else {
          if (currentNote.highlight || currentNote.thought) {
            outputCurrentNote();
          }
          pendingOriginal = originalText;
        }
      } else if (!line.startsWith("\u25C6") && !line.startsWith("\u539F\u6587\uFF1A") && line.length > 0) {
        if (pendingOriginal) {
          cleanedLines.push("> " + pendingOriginal, "");
          cleanedLines.push(line, "");
          pendingOriginal = null;
        } else {
          if (currentNote.thought) {
            outputCurrentNote();
          }
          pendingThought = line;
        }
      }
      i++;
    }
    outputCurrentNote();
    if (pendingThought) {
      cleanedLines.push(pendingThought, "");
    }
    return cleanedLines.join("\n");
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_WEREAD);
    const styleEl = document.getElementById("weread-formatter-styles");
    if (styleEl) {
      styleEl.remove();
    }
  }
};
